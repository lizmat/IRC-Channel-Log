use Test;
use IRC::Log::Colabti;
use IRC::Channel::Log;

plan 49;

my $logdir := $?FILE.IO.sibling('raku');
my $state  := $?FILE.IO.sibling('state');
my $class  := IRC::Log::Colabti;

sub generator($nick) { "$nick.color" }

my $channel = IRC::Channel::Log.new(:$logdir, :$class, :&generator, :$state);
is $channel.problems.elems, 0,
  'there should be no problems';
isa-ok $channel, IRC::Channel::Log;

my @dates = $channel.dates;
is +@dates, 2, 'did we get 2 dates';
is @dates.head, '2021-04-23', 'is the first date ok';
is @dates.tail, '2021-04-24', 'is the last date ok';

my @problems := $channel.problems;
is +@problems, 0, 'did we get correct number of problems';

my @nicks = $channel.nicks;
is +@nicks, 260, 'did we get correct number of nicks';
is @nicks.sort.skip.head, "APic", 'is the first real nick ok';
is @nicks.sort.tail, "|Sno|", 'is the last nick ok';

for False, True -> $reverse {
    is $channel.entries(:$reverse).elems, 1229,
      'did we get correct total entries';
    is $channel.entries(:control, :$reverse).elems, 766,
      'did we get correct number of control messages';
    is $channel.entries(:conversation, :$reverse).elems, 463,
      'did we get correct number of  messages';

    is $channel.entries(:nicks<lizmat>, :$reverse).elems, 118,
      'did we get correct number of entries by lizmat';

    is $channel.entries(:control, :nicks<lizmat>, :$reverse).elems, 1,
      'did we get correct number of control messages by lizmat';
    is $channel.entries(:conversation, :nicks<lizmat>, :$reverse).elems, 117,
      'did we get correct number of conversation messages by lizmat';

    is $channel.entries(
      :dates<2021-04-24>, :nicks<lizmat>, :$reverse
    ).elems, 49,
      'did we get correct number of entries by lizmat on 2021-04-24';
    is $channel.entries(
      :dates("2021-04-20".Date .. "2021-04-23".Date), :nicks<lizmat>, :reverse
    ).elems, 69, 'correct number of entries by lizmat from Date range';
    is $channel.entries(:nicks<lizmat japhb>, :$reverse).elems, 146,
      'correct number of entries by lizmat or japhb';

    is $channel.entries(:contains<answer>, :$reverse).elems, 4,
      'correct number of entries with text "answer"';
    is $channel.entries(:contains<question answer>, :$reverse).elems, 12,
      'correct number of entries with text "question" or "answer"';
    is $channel.entries(:contains<question answer>, :all, :$reverse).elems, 2,
      'correct number of entries with text "question" and "answer"';

    is $channel.entries(
      :matches(/ [^ | \s+] \d\d+ [\s+ | $] /), :$reverse
    ).elems, 9,
      'correct number of whitespaced multi-digit numbers';
}

is $channel.this-date('2021-04-23'), '2021-04-23', 'did we get this date';
is $channel.this-date('2021-04-22'), '2021-04-23', 'did we get next date';
is $channel.this-date('2021-04-25'), '2021-04-24', 'did we get previous date';

is $channel.next-date('2021-04-23'), '2021-04-24', 'did we get next date';
is-deeply $channel.next-date('2021-04-24'), Nil, 'is last date handled ok';

is $channel.prev-date('2021-04-24'), '2021-04-23', 'did we get previous date';
is-deeply $channel.prev-date('2021-04-23'), Nil, 'is first date handled ok';

isa-ok $channel.log('2021-04-23'), IRC::Log::Colabti;
is-deeply $channel.log('2021-04-25'), Nil, 'no log on 2021-04-25';

ok $channel.is-first-date-of-month('2021-04-23'),  'first date in month ok';
ok $channel.is-first-date-of-year('2021-04-23'),   'first date in year ok';
nok $channel.is-first-date-of-month('2021-04-24'), 'first date in month nok';
nok $channel.is-first-date-of-year('2021-04-24'),  'first date in year nok';

$state.mkdir;
my $colors := $state.add('colors.json');
$channel.shutdown;
ok $colors.e, 'did we save state information';
$colors.unlink;  # clean up
$state.rmdir;

# vim: expandtab shiftwidth=4
